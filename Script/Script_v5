#!/bin/bash

# ========================================
# Pipeline automatisé pour l'appel de variants
# Auteur: [Votre nom]
# Date: [Date actuelle]
# ========================================

# Determine the script's directory (repository root)
SCRIPT_DIR=$(dirname "$(realpath "$0")")

# ==== Définir les variables ====
DATA="$SCRIPT_DIR/Data/FC20150701_1.fq.gz"
BARCODE="$SCRIPT_DIR/Data/FC20150701_1.txt"
REF="$SCRIPT_DIR/Data/Gmax_275_v2.0.fa.gz"
CPU=4
OUT_FASTQC_PRE="$SCRIPT_DIR/Résultats/fastqc_pre_trim"
OUT_FASTQC_POST="$SCRIPT_DIR/Résultats/fastqc_post_trim"
OUT_ASSEMBLY="$SCRIPT_DIR/Résultats/assembly"
OUT_RESULTS="$SCRIPT_DIR/Résultats/results1"

# ==== Vérifications initiales ====
if [ ! -f "$DATA" ]; then
    echo "ERREUR : Fichier FASTQ $DATA introuvable." >&2
    exit 1
fi

if [ ! -f "$BARCODE" ]; then
    echo "ERREUR : Fichier de barcodes $BARCODE introuvable." >&2
    exit 1
fi

if [ ! -f "$REF" ]; then
    echo "ERREUR : Génome de référence $REF introuvable." >&2
    exit 1
fi

# ==== Étape 1 : Démultiplexage ====
exec &> "$SCRIPT_DIR/logs/sabre.log"
mkdir -p "$SCRIPT_DIR/Résultats"
echo "Démarrage du démultiplexage avec sabre..."
sabre se -f "$DATA" -b "$BARCODE" -u "$SCRIPT_DIR/results/unk.fastq"
if [ $? -ne 0 ]; then
    echo "Échec de l'étape de démultiplexage avec sabre." >&2
    exit 1
fi
echo "Démultiplexage terminé avec succès."

# ==== Étape 2 : Analyse de qualité pré-trim ====
mkdir -p "$OUT_FASTQC_PRE"
echo "Analyse de qualité (pré-trim) avec FastQC..."
fastqc -o "$OUT_FASTQC_PRE" "$DATA"
if [ $? -ne 0 ]; then
    echo "Erreur lors de l'analyse de qualité pré-trim pour $DATA." >&2
    exit 1
fi
echo "Analyse de qualité pré-trim terminée."

# ==== Étape 3 : Trimming ====
exec &> "$SCRIPT_DIR/logs/cutadapt.log"
echo "Démarrage du trimming avec Cutadapt..."
mkdir -p "$SCRIPT_DIR/trimmed"
cutadapt -a "AGATCGGAA" -m 50 -o "$SCRIPT_DIR/trimmed/FC20150701_1_trimmed.fq.gz" "$DATA"
if [ $? -ne 0 ]; then
    echo "Erreur lors du trimming pour $DATA." >&2
    exit 1
fi
echo "Trimming terminé."

# ==== Étape 4 : Analyse de qualité post-trim ====
mkdir -p "$OUT_FASTQC_POST"
echo "Analyse de qualité (post-trim) avec FastQC..."
fastqc -o "$OUT_FASTQC_POST" "$SCRIPT_DIR/trimmed/FC20150701_1_trimmed.fq.gz"
if [ $? -ne 0 ]; then
    echo "Erreur lors de l'analyse de qualité post-trim." >&2
    exit 1
fi
echo "Analyse de qualité post-trim terminée."

# ==== Étape 5 : Alignement ====
exec &> "$SCRIPT_DIR/logs/bwa.log"
mkdir -p "$SCRIPT_DIR/aligned"
echo "Alignement avec BWA..."
bwa mem -t "$CPU" "$REF" "$SCRIPT_DIR/trimmed/FC20150701_1_trimmed.fq.gz" > "$SCRIPT_DIR/aligned/FC20150701_1.sam"
if [ $? -ne 0 ]; then
    echo "Erreur lors de l'alignement." >&2
    exit 1
fi
echo "Alignement terminé."

# ==== Étape 6 : Conversion SAM -> BAM ====
exec &> "$SCRIPT_DIR/logs/samtools.log"
echo "Conversion des fichiers SAM en BAM..."
mkdir -p "$SCRIPT_DIR/bam_files"
samtools view -bS "$SCRIPT_DIR/aligned/FC20150701_1.sam" > "$SCRIPT_DIR/bam_files/FC20150701_1.bam"
samtools sort "$SCRIPT_DIR/bam_files/FC20150701_1.bam" -o "$SCRIPT_DIR/bam_files/FC20150701_1.sorted.bam"
samtools index "$SCRIPT_DIR/bam_files/FC20150701_1.sorted.bam"
echo "Conversion SAM -> BAM terminée."

# ==== Étape 7 : Appel de variants ====
exec &> "$SCRIPT_DIR/logs/variant_calling.log"
mkdir -p "$OUT_RESULTS"
echo "Appel de variants avec SAMtools et BCFtools..."
samtools mpileup -g -f "$REF" "$SCRIPT_DIR/bam_files/FC20150701_1.sorted.bam" > "$OUT_RESULTS/variants.bcf"
bcftools call -mv -O v -o "$OUT_RESULTS/variants.vcf" "$OUT_RESULTS/variants.bcf"
if [ $? -ne 0 ]; then
    echo "Erreur lors de l'appel de variants." >&2
    exit 1
fi
echo "Appel de variants terminé."

# ==== Étape 8 (Bonus) : Annotation ====
echo "Étape d'annotation sautée (SnpEff non utilisé)."

echo "Pipeline terminé avec succès."
